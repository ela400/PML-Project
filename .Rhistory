steps_per_interval
plot(steps_per_interval, type="l")
?plot
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
max(steps_per_interval)
steps_per_interval
?max
which.max(steps_per_interval)
max(steps_per_interval)
?which
?which.max
?max.col(steps_per_interval)
max.col(steps_per_interval)
names(which.max(steps_per_interval))
source('~/Desktop/JH Data Analysis/PA1.R')
summary(activity_data$steps)
length(which(is.na(activity_data$steps)==TRUE))
source('~/Desktop/JH Data Analysis/PA1.R')
?lookup
?lookup.table
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
str(steps_per_interval)
source('~/Desktop/JH Data Analysis/PA1.R')
install.packages("qdaptools")
install.packages("qdapTools")
steps_per_interval[0]
steps_per_interval[1]
steps_per_interval[2]
str(activity_data)
steps <- activity_data[1,]
steps
steps_per_interval[1]
steps_per_interval[1,1]
steps_per_interval[1,]$steps
steps <- activity_data[1,1]
steos
steps
activity_data[1,1] <- 1
steps <- activity_data[1,1]
steps
activity_data[1,1] <- "NA"
steps <- activity_data[1,1]
steps
activity_data[1,1] <- NA
steps <- activity_data[1,1]
steps
source('~/Desktop/JH Data Analysis/PA1.R')
head(activity_data)
?as
source('~/Desktop/JH Data Analysis/PA1.R')
head(activity_data)
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
mean(isteps_per_day)
median(isteps_per_day)
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
str(imputed_data)
id <- imputed_data
weekdays(id[1,2])
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
warnings()
head(imputed_data)
tail(imputed_data)
imputed_data
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
warnings()
as.factor("weekend")
weekdays(imputed_data[100,2])
weekdays(imputed_data[10,2])
weekdays(imputed_data[1000,2])
weekdays(imputed_data[2000,2])
weekdays(imputed_data[1900,2])
weekdays(imputed_data[1800,2])
weekdays(imputed_data[1700,2])
head(imputed_data)
imputed_data[1700]
imputed_data[1700,]
imputed_data[700,]
imputed_data2200,]
imputed_data[2200,]
str(weekdays(imputed_data[1700,2]))
str(weekdays(imputed_data[2000,2]))
weekdays(imputed_data[1700,2]) == "Saturday"
weekdays(imputed_data[1700,2]) == "Surday"
weekdays(imputed_data[2000,2]) == "Sunday"
source('~/Desktop/JH Data Analysis/PA1.R')
imputed_data[2200,]
imputed_data[2000,]
imputed_data[1700,]
source('~/Desktop/JH Data Analysis/PA1.R')
warnings()
head(imputed_data)
source('~/Desktop/JH Data Analysis/PA1.R')
head(imputed_data)
str(imputed_data)
names(imputed_data)
names(imputed_data)[4] <- "daytype"
names(imputed_data)
?panel
?panelplot
source('~/Desktop/JH Data Analysis/PA1.R')
plot(daytype,imputed_data)
plot(cut(daytype,2),imputed_data)
plot(cut(daytype,2) ~ group,imputed_data)
plot(daytype ~ group,imputed_data)
install.packages("ggplot2")
require(ggplot2)
qplot(as.factor(c("weekend","weekday")))
qplot(as.factor(c("weekend","weekday")),imputed_data)
ggplot(imputed_data)
ggplot(imputed_data, aes(x=interval, y=steps))
ggplot(imputed_data, aes(x=interval, y=steps)) + facet_wrap(~daytype, nrow=2, ncol=1)
plot(imputed_data$daytype,imputed_data$steps)
boxplot(imputed_data$steps ~ imputed_data$daytype)
str(steps_per_interval)
?tapply
source('~/Desktop/JH Data Analysis/PA1.R')
source('~/Desktop/JH Data Analysis/PA1.R')
?par
xyplot(y~imputed_data$steps | imputed_data$daytype, data=imputed_data$steps, )
library(lattice)
xyplot(y~imputed_data$steps | imputed_data$daytype, data=imputed_data$steps, )
xyplot(y~imputed_data$steps | imputed_data$daytype, data=imputed_data$steps )
xyplot(y~x | imputed_data$daytype, data=imputed_data$steps )
xyplot(steps ~ interval | daytype, data = imputed_data)
xyplot(steps ~ interval | daytype, data = imputed_data, type="l")
str(steps_per_weekend)
steps_per_weekend$daytype <- as.factor("weekend")
str(steps_per_weekend)
head(steps_per_weekend)
?plot
head(steps_per_interval)
source('~/Desktop/JH Data Analysis/PA1.R')
head(steps_per_interval)
steps_per_interval
plot(steps_per_interval, type="l", main="Average Steps per 5-minute Interval",
xlab="Interval", ylab="Average Number of Steps")
?plot
plot(names(steps_per_interval), steps_per_interval, type="l", main="Average Steps per 5-minute Interval",
xlab="Interval", ylab="Average Number of Steps")
source('~/Desktop/JH Data Analysis/PA1.R')
getwd()
dat <- readcsv("getdata-data-ss06hid.csv")
dat <- read.csv("getdata-data-ss06hid.csv")
head(dat)
head(dat,1)
aglog <- dat(dat$ACR==3 & dat$AGS==6)
aglog <- dat[dat$ACR==3 & dat$AGS==6]
aglog <- dat[dat$ACR==3 && dat$AGS==6]
head(aglog)
aglog
aglog <- dat[(dat$ACR==3 && dat$AGS==6),]
aglog
aglog <- dat[(dat$ACR=="3" && dat$AGS=="6"),]
aglog
str(dat)
aglog <- dat[(dat$ACR==3 && dat$AGS==6),]
aglog <- dat[(dat$ACR==3 & dat$AGS==6),]
aglog
head(aglog)
aglog <- dat[(dat$ACR==3 & dat$AGS==6 & !is.na(dat$ACR) & !is.na(dat$AGS)),]
head(aglog)
aglog <- (dat$ACR==3 & dat$AGS==6 & !is.na(dat$ACR) & !is.na(dat$AGS))
head(aglog)
which(aglog)
library(jpeg)
install.packages("jpeg")
library(jpeg)
img <- readJPEG(system.file("img", "getdata-jeff.jpg", package="jpeg"))
getwd()
?readJPEG
img <- readJPEG(system.file("img", "getdata-jeff.jpg", package="jpeg"))
?system.file
img <- readJPEG("getdata-jeff.jpg")
quantile(img,probs=c(.3,.8))
quantile(img,probs=c(.3,.8),native=TRUE)
str(image)
str(img)
img <- readJPEG("getdata-jeff.jpg", native=FALSE)
quantile(img,probs=c(.3,.8))
img <- readJPEG("getdata-jeff.jpg", native=TRUE)
quantile(img,probs=c(.3,.8))
gdp <- read.csv("getdata-data-gdp.csv")
edu <- read.csv("getdata-data-EDSTATS_Country.csv")
head(gdp,2)
head(edu,2)
gdp
edu
head(edu,3)
head(edu,2)
head(gdp,2)
mdata <- merge(gdp,edu,by.x="X",by.y="CountryCode")
mdata
head(mdata)
tail(mdata)
head(gdp)
?merge
sdata <- mdata[order(-Gross.domestic.product.2012)]
sdata <- mdata[order(-mdata$Gross.domestic.product.2012)]
str(mdata)
sdata <- mdata[order(-as.numeric(mdata$Gross.domestic.product.2012)]
sdata <- mdata[order(-as.numeric(mdata$Gross.domestic.product.2012))]
sort(mdata$Gross.domestic.product.2012)
sort(mdata$Gross.domestic.product.2012,descending=TRUE)
head(mdata)
mdata <- merge(gdp,edu,by.x="X",by.y="CountryCode",all=TRUE)
head(mdata)
summary(mdata)
mdata <- merge(gdp,edu,by.x="X",by.y="CountryCode")
head(mdata)
gdp
gdp2 <- gdp[(gdp$)]
head(gdp)
gdp2 <- gdp[(gdp$Gross.domestic.product.2012>0 | gdp$Gross.domestic.product.2012<200),]
str(gdp)
gdp <- read.csv("getdata-data-GDP.csv",colClasses())
?read.csv
gdp <- read.csv("getdata-data-GDP.csv",colClasses=c("Gross.domestic.product.2012"="int"))
gdp <- read.csv("getdata-data-GDP.csv",colClasses=c("Gross.domestic.product.2012"="character"))
str(gdp)
names(gdp[2])<-"Y"
str(gdp)
gdp <- read.csv("getdata-data-GDP.csv",colClasses=c("Gross.domestic.product.2012"="character"))
mdata <- merge(gdp,edu,by.x="X",by.y="CountryCode")
gdp2 <- gdp[(gdp$Gross.domestic.product.2012>"0" & gdp$Gross.domestic.product.2012<"200"),]
head(gdp2)
gdp2
gdp2 <- gdp[(gdp$Gross.domestic.product.2012>"0" & gdp$Gross.domestic.product.2012<"999"),]
mdata <- merge(gdp,edu,by.x="X",by.y="CountryCode")
mdata <- merge(gdp2,edu,by.x="X",by.y="CountryCode")
mdata
sort(mdata$Gross.domestic.product.2012,decreasing=TRUE)
gdp2
tail(gdp2,15)
str(gdps)
str(gdp2)
gdp2$Gross.domestic.product.2012 <- as.numeric(gdp2$Gross.domestic.product.2012)
str(gdp2)
mdata <- merge(gdp2,edu,by.x="X",by.y="CountryCode")
sort(mdata$Gross.domestic.product.2012,decreasing=TRUE)
head(mdata)
tail(mdata)
tail(mdata,10)
tail(mdata,15)
mean(mdata$Gross.domestic.product.2012[mdata$Income.Group=="High income: nonOECD"])
mean(mdata$Gross.domestic.product.2012[mdata$Income.Group=="High income: OECD"])
quantile(gdp2$Gross.domestic.product.2012)
?quantile
n <- 2
dfchunk <- split(x, factor(sort(rank(row.names(x))%%n)))
n <- 5
gdp3 <- split(gdp2, factor(sort(rank(row.names(gdp2))%%n)))
gdp3
str(gdp3)
gdp3[1]
mdata2 <- split(mdata, factor(sort(rank(row.names(mdata))%%n)))
head(mdata2)
mdata2[1]
sort(mdata$Gross.domestic.product.2012)
mdata2 <- split(mdata, factor(sort(rank(row.names(mdata))%%n)))
mdata2[1]
gdp3
mdata3 <- merge(gdp3,edu,by.x="X",by.y="CountryCode")
str(gdp3)
mdata3 <- merge(gdp3[1],edu,by.x="X",by.y="CountryCode")
gdp4 <- gdp3[1]
str(gdp4)
gdp4 <- gdp3[1]
gdp5 <- data.frame(matrix(unlist(gdp4)))
str(gdp5)
gdp5 <- data.frame(gdp4[1])
str(gdp5)
mdata3 <- merge(gdp5,edu,by.x="X0.X",by.y="CountryCode")
str(mdata3)
table(mdata3$Income.Group)
savehistory("~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.Rhistory")
?strsplit
strsplit(c('wgtp5'),'wgtp')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
head(gdp3)
head(gdp2)
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
source('~/Desktop/JH Data Analysis/GCD-Quiz3-ConsoleHistory.R')
gdp3
gdp2
gdp2[5]
gdp2[5] <- as.numeric(gdp2[5])
gdp
gdp2
str(gdp2)
gdp <- read.csv("getdata-data-GDP.csv",colClasses=c("Gross.domestic.product.2012"="character","X.3"="character"))
gdp2 <- gdp[(gdp$Gross.domestic.product.2012>"0" & gdp$Gross.domestic.product.2012<"200"),]
gdp2$Gross.domestic.product.2012 <- as.numeric(gdp2$Gross.domestic.product.2012)
gdp2$X.3 <- as.numeric(gdp2$X.3)
gdp2
?as.numeric
gdp2$X.3 <- as.double(gdp2$X.3)
gdp2
gdp2 <- gdp[(gdp$Gross.domestic.product.2012>"0" & gdp$Gross.domestic.product.2012<"200"),]
gdp2$Gross.domestic.product.2012 <- as.numeric(gdp2$Gross.domestic.product.2012)
gdp2$X.3 <- as.double(gdp2$X.3)
gdp2 <- gdp[(gdp$Gross.domestic.product.2012>"0" & gdp$Gross.domestic.product.2012<"200"),]
gdp2$Gross.domestic.product.2012 <- as.numeric(gdp2$Gross.domestic.product.2012)
gdp2$X.3 <- as.numeric(gsub(",","", gdp2$X.3))
gdp2
mean(gdp2$X.3)
gdp$X.3
mean(as.numeric(gsub(",","", gdp$X.3)))
gdpm <- as.numeric(gsub(",","", gdp$X.3))
gdpm
mean(as.numeric(gsub(",","", gdp$X.3)),na.rm=TRUE)
?mean
gdpmean <- (as.numeric(gsub(",","", gdp$X.3)),na.rm=TRUE)
gdpmean <- as.numeric(gsub(",","", gdp$X.3))
gdpmean
mean(gdpmean,na.rm=TRUE)
gdp2
gdp2 <- gdp[(gdp$Gross.domestic.product.2012>"0" & gdp$Gross.domestic.product.2012<"999"),]
gdp2$Gross.domestic.product.2012 <- as.numeric(gdp2$Gross.domestic.product.2012)
gdp2$X.3 <- as.numeric(gsub(",","", gdp2$X.3))
mean(gdp2$X.3)
?grep
grep("^United",countryNames)
grep("^United",gdp2$countryNames)
str(gdp2)
head(gdp2)
grep("^United",gdp2$X.2)
head(mdata)
str(mdata)
str(edu)
gdp
head(gdp,2)
head(gdp,20)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
str(sampleTimes)
gsub("^2012",sampleTimes)
?gsub
grep("^2012",sampleTimes)
head(gdp,20)
head(edu,5)
tail(edu,10)
grep("June 30",edu$Special.Notes)
12 + qnorm(.05) * .4
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
coef(lm(y~x))
data(mtcars)
data(mtcars)
coef(lm(mpg~weight))
ls(mtcars)
coef(lm(mpg~wt))
str(mtcars)
coef(lm(mtcars$mpg~mtcars$wt))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y~x))
mean(x)
myPlot <- function(beta){     plot(x, y, pch=21,col="black",bg="lightblue", xlab="x", ylab="y")    abline(0,beta,lwd=3) points(0,0,cex=2,pch=19)     mse<-mean((y-beta*x)^2)     title(paste("beta=",beta,"mse=",round(mse,3)))}manipulate(myPlot(beta),beta=slider(0.1,1.8,step=0.02))
myPlot <- function(beta){     plot(x, y, pch=21,col="black",bg="lightblue", xlab="x", ylab="y")    abline(0,beta,lwd=3)     points(0,0,cex=2,pch=19)     mse<-mean((y-beta*x)^2)     title(paste("beta=",beta,"mse=",round(mse,3)))}manipulate(myPlot(beta),beta=slider(0.1,1.8,step=0.02))
mean(x)
mean(y)
mean(y)/mean(x)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
apropos("^panel")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
library(mtcars)
z<- mtcars
?mtcars
mtcars
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages('caret')
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
log(0)
install.packages('devtools')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install.packages(gclus)
install.packages('gclus')
install.packages('leaps')
install.packages('relaimpo')
install.packages('cluster')
install.packages('car')
tapply(mtcars$mpg, mtcars$am, mean)
summary(aov(mpg ~ ., data=mtcars))
summary(lm(mpg ~ cyl + disp + wt + am, data(mtcars)))
summary(lm(mpg ~ cyl + disp + wt + am, data=mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ cyl + wt, data = mtcars))
library(caret)
library(gbm)
set.seed(12345)
trainData <- read.csv('pml-training.csv')
trainData <- trainData[,7:length(colnames(trainData))]
trainData <- trainData[,!apply(trainData, 2, function(x) any(is.na(x)))]
nsv <- nearZeroVar(trainData, saveMetrics=TRUE)
nsv <- nsv[!nsv$nzv,]
trainData <- trainData[,(names(trainData) %in% row.names(nsv))]
testData <- read.csv('pml-testing.csv')
testData <- testData[,(names(testData) %in% row.names(nsv))]
setwd("~/Desktop/JH Data Analysis/PML")
trainData <- read.csv('pml-training.csv')
trainData <- trainData[,7:length(colnames(trainData))]
trainData <- trainData[,!apply(trainData, 2, function(x) any(is.na(x)))]
nsv <- nearZeroVar(trainData, saveMetrics=TRUE)
nsv <- nsv[!nsv$nzv,]
trainData <- trainData[,(names(trainData) %in% row.names(nsv))]
testData <- read.csv('pml-testing.csv')
testData <- testData[,(names(testData) %in% row.names(nsv))]
inTrain <- createDataPartition(y=trainData$classe, p=0.6, list=FALSE)
trainTrain <- trainData[inTrain,]
trainTV <- trainData[-inTrain,]
inTrain <- createDataPartition(y=trainTV$classe, p=0.5, list=FALSE)
trainTest <- trainTV[inTrain,]
trainValidate <- trainTV[-inTrain,]
gbmFit <- train(classe ~ ., method="gbm", data=trainTrain, verbose=FALSE,
preProcess=c("center","scale"),
trControl=trainControl(method="cv", number=3))
predTest <- predict(gbmFit, newdata=trainTest)
print(confusionMatrix(predTest, trainTest$classe)) #99.08%
predVal <- predict(gbmFit, newdata=trainValidate)
print(confusionMatrix(predVal, trainValidate$classe)) #98.93%
gbmFit <- train(classe ~ ., method="gbm", data=trainTrain, verbose=FALSE,
preProcess=c("center","scale"),
trControl=trainControl(method="cv", number=7))
predTest <- predict(gbmFit, newdata=trainTest)
print(confusionMatrix(predTest, trainTest$classe)) #99.08%
predVal <- predict(gbmFit, newdata=trainValidate)
print(confusionMatrix(predVal, trainValidate$classe)) #98.93%
gbmFit <- train(classe ~ ., method="gbm", data=trainTrain, verbose=FALSE,
preProcess=c("center","scale"),
trControl=trainControl(method="cv", number=4))
predTest <- predict(gbmFit, newdata=trainTest)
print(confusionMatrix(predTest, trainTest$classe)) #99.08%
predVal <- predict(gbmFit, newdata=trainValidate)
print(confusionMatrix(predVal, trainValidate$classe)) #98.93%
gbmFit <- train(classe ~ ., method="gbm", data=trainTrain, verbose=FALSE,
preProcess=c("center","scale"),
trControl=trainControl(method="cv", number=6))
predTest <- predict(gbmFit, newdata=trainTest)
print(confusionMatrix(predTest, trainTest$classe)) #99.08%
predVal <- predict(gbmFit, newdata=trainValidate)
print(confusionMatrix(predVal, trainValidate$classe)) #98.93%
rfmFit <- train(classe ~ ., method="rf", data=trainTrain, verbose=FALSE,
preProcess=c("center","scale"),
trControl=trainControl(method="cv", number=5))
predTest <- predict(rfmFit, newdata=trainTest)
print(confusionMatrix(predTest, trainTest$classe))
predVal <- predict(rfmFit, newdata=trainValidate)
print(confusionMatrix(predVal, trainValidate$classe))
predFinal <- predict(rfmFit, newdata=testData)
predFinal
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predFinal)
